// import React, { useState ,useEffect} from "react";
// import { Col, Row, Table } from "react-bootstrap";
// import { toast } from "react-toastify";
// import { Link, useNavigate } from "react-router-dom";
// import PageLayout from "../../layouts/PageLayout";
// import { CardLayout } from "../../components/cards";
// import axiosInstance from "../../apis";
// import axios from "axios";
// import SelectField from "../../components/fields/SelectField";

// export default function PendingGoodIssue() {
//     const navigate = useNavigate();
// const [items, setItems] = useState([]);
// const [currentPage, setCurrentPage] = useState(1);
// const [selectedRows, setSelectedRows] = useState([]);
// const [warehouseOptions, setWarehouseOptions] = useState([]);
   
// const companyDB = localStorage.getItem("companyDB");

// const itemsPerPage = 10;

// const [searchTerm, setSearchTerm] = useState("");

// const filteredItems = items.filter(
// item =>
// item.ItemName?.toLowerCase().includes(searchTerm?.toLowerCase()) ||
// item.ItemCode?.toLowerCase().includes(searchTerm?.toLowerCase())
// );

// const handleCheckboxChange = (index) => {
// const isSelected = selectedRows.includes(index);
// if (isSelected) {
//   setSelectedRows(selectedRows.filter((i) => i !== index));
// } else {
//   setSelectedRows([...selectedRows, index]);
// }
// };

// const paginatedItems = filteredItems.slice(
// (currentPage - 1) * itemsPerPage,
// currentPage * itemsPerPage
// );

// useEffect(()=>{
// fetchGoodRequestIssueDocuments();
// fetchWarehouse();
// },[])

// // const handleWarehouseChange = (index, event) => {
// // const updatedLines = [...goodIssue];
// // // updatedLines[index].warehouse = event.target.value;
// // const line = updatedLines[index];

// // line.warehouse = selected.value;

// // try {
// // const res =  axios.get(`http://localhost:5000/api/Instockquantity?CompanyDB=${companyDB}&ItemCode=${line.item_code}&WhsCode=${selected.value}`);
// // const stockData = res.data[0] || {};
// // line.WarehouseStock = stockData["WareHouse stock"] || 0;
// // line.TotalInStock = stockData["Total in stock"] || 0;
// // } catch (error) {
// // console.error("Error updating stock on warehouse change:", error);
// // line.WarehouseStock = 0;
// // line.TotalInStock = 0;
// // }

// // setGoodIssue(updatedLines);
// // };
// const handleWarehouseChange = async (index, selected) => {
//   const updated = [...goodIssue];
//   const line = updated[index];

//   line.warehouse = selected.value;

//   try {
//     const res = await axios.get(`http://localhost:5000/api/Instockquantity?CompanyDB=${companyDB}&ItemCode=${line.item_code}&WhsCode=${selected.value}`);
//     const stockData = res.data[0] || {};
//     line.WarehouseStock = stockData["WareHouse stock"] || 0;
//     line.TotalInStock = stockData["Total in stock"] || 0;
//   } catch (error) {
//     console.error("Error updating stock on warehouse change:", error);
//     line.WarehouseStock = 0;
//     line.TotalInStock = 0;
//   }

//   setGoodIssue(updated);
// };

// const [goodIssue, setGoodIssue] = useState([
//     { item_name: "", item_code: "",request_stock_docno:"",doc_num:"", requiredqty: "", warehouse: "",TotalInStock: "",WarehouseStock: "",issuedqty:"",remainingqty:"",ConfirmedQty:"" },
//   ]);

//   const handleLineChange = (index, e) => {
//     const { name, value } = e.target;
//     const updatedLines = [...goodIssue];
  
//     if (name === "ConfirmedQty") {
//       const remaining = parseFloat(updatedLines[index].remainingqty);
//       const inputQty = parseFloat(value);
  
//       if (inputQty > remaining) {
//         toast.error("Confirmed quantity cannot exceed remaining quantity");
//         return;
//       }
//     }
  
//     updatedLines[index][name] = value;
//     setGoodIssue(updatedLines);
//   };
  
      
// //   const handleLineChange = (index, e) => {
// //     const { name, value } = e.target;
// //     const updatedLines = [...goodIssue];
// //     updatedLines[index][name] = value;
// //     setGoodIssue(updatedLines);
// //   };

//   const fetchGoodRequestIssueDocuments = async () => {
//     try {
//       const res = await axios.get(`http://localhost:5000/api/pendinggoodissue?CompanyDB=${companyDB}`);
//       // const formatted = res.data.map((item) => ({
//       //   item_name: item.Dscription,
//       //   item_code: item.ItemCode,
//       //   request_stock_docno: item.DocEntry,
//       //   doc_num: item.DocNum,
//       //   doc_date:item.DocDate,
//       //   requiredqty: item.req_qty,
//       //   warehouse: item.FromWhsCod,
//       //   issuedqty: item.Issued_qty,
//       //   remainingqty: item.R_qty,
//       //   ConfirmedQty: "" // initially empty
//       // }));
// const rawData = res.data;

// const withStock = await Promise.all(
//   rawData.map(async (item) => {
//     try {
//       const stockRes = await axios.get(`http://localhost:5000/api/Instockquantity?CompanyDB=${companyDB}&ItemCode=${item.ItemCode}&WhsCode=${item.FromWhsCod}`);
//       const stockData = stockRes.data[0] || {}; // handle empty result
//       // Format doc_date
//       const rawDate = item.DocDate.split(" ")[0]; // "2025-05-24"
//       const formattedDate = new Date(rawDate).toLocaleDateString("en-US", {
//         year: "numeric",
//         month: "long",
//         day: "numeric"
//       });
//       return {
//         item_name: item.Dscription,
//         item_code: item.ItemCode,
//         request_stock_docno: item.DocEntry,
//         doc_num: item.DocNum,
//         doc_date: formattedDate,
//         requiredqty: item.req_qty,
//         warehouse: item.FromWhsCod,
//         issuedqty: item.Issued_qty,
//         remainingqty: item.R_qty,
//         ConfirmedQty: "",
//         WarehouseStock: stockData["WareHouse stock"] || 0,
//         TotalInStock: stockData["Total in stock"] || 0,
//       };
//     } catch (error) {
//       console.error("Error fetching stock for item:", item.ItemCode, error);
//       return {
//         ...item,
//         WarehouseStock: 0,
//         TotalInStock: 0,
//         ConfirmedQty: "",
//       };
//     }
//   })
// );

// setGoodIssue(withStock);
//       // setGoodIssue(formatted);
//     } catch (error) {
//       console.log("Stock Request Issue Documents fetch error:", error);
//     }
//   };

// //   const FetchInStockQuantity = async (ItemCode,WhsCode) => {
// //     try {
// //       const res = await axios.get(`http://localhost:5000/api/Instockquantity?CompanyDB=${companyDB}&ItemCode=ItemCode&WhsCode=${WhsCode}`);
// //       const formatted = res.data.map((item) => ({
// //      WarehouseStock:item.WareHouse stock,
// //  TotalStock:item.Total in stock
// //       }));
     
// //     } catch (error) {
// //       console.log("Stock Request Issue Documents fetch error:", error);
// //     }
// //   };

//   const fetchWarehouse = async () => {
//     try {
//       const res = await axios.get(`http://localhost:5000/api/warehouse?CompanyDB=${companyDB}`);
//       const formattedData = res.data.map((wh) => ({
//         label: wh.WhsName,
//         value: wh.WhsCode,
//       }));
//       setWarehouseOptions(formattedData);
//     } catch (error) {
//       console.log("Warehouse fetch error:", error);
//     }
//   };

// const handleSubmit = async (e) => {
//     e.preventDefault();
  
//     if (selectedRows.length === 0) {
//       toast.warn("Please select at least one row.");
//       return;
//     }
  
//     const selectedLines = selectedRows.map(index => goodIssue[index]);
  
//     const groupedByDocNum = selectedLines.reduce((groups, line) => {
//       const docNum = line.doc_num;
//       if (!groups[docNum]) {
//         groups[docNum] = [];
//       }
//       groups[docNum].push(line);
//       return groups;
//     }, {});
  
//     try {
//       for (const docNum in groupedByDocNum) {
//         const lines = groupedByDocNum[docNum];
  
//         const payload = {
//           Reference2: docNum,
//           DocumentLines: lines.map(line => ({
//             ItemCode: line.item_code,
//             ItemDescription: line.item_name,
//             Quantity: line.ConfirmedQty,
//             AccountCode: "A20301002",
//             WarehouseCode: line.warehouse
//           }))
//         };
//         console.log(payload);
  
//         await axiosInstance.post("/InventoryGenExits", payload);
//       }
  
//       toast.success("All selected Good Issues created successfully!");
//       setSelectedRows([]); 
//     } catch (error) {
//       console.error("Submission error:", error);
//       toast.error("Failed to create some Good Issues",error);
//     }
//   };
  
//   const groupedData = goodIssue.reduce((acc, item) => {
//     const docNum = item.doc_num;
//     if (!acc[docNum]) {
//       acc[docNum] = [];
//     }
//     acc[docNum].push(item);
//     return acc;
//   }, {});

//   const [expandedDocs, setExpandedDocs] = useState([]);
// const toggleDoc = (docNum) => {
// setExpandedDocs(prev =>
// prev.includes(docNum)
//   ? prev.filter(d => d !== docNum)
//   : [...prev, docNum]
// );
// };


//   return (
//     <PageLayout>
//       <form onSubmit={handleSubmit}>
//         <Row>
//             <CardLayout>
//           <Col md={12} className="mb-4">
//             {/* <CardLayout> */}
//               <h3>Create Pending Good Issue</h3>
//             {/* </CardLayout> */}
//           </Col>

//           <Col md={12}>
//               {/* <Table   >
//                 <thead className="text-center" style={{fontSize:"12px "}}  >
//                   <tr >
//                   <th>Select</th>
//                   {/* <th>Stock Request Doc</th> */}
//                   {/* <th>Doc Num</th>
//                     <th>Item Code</th>
//                     <th>Item Name</th>
//                     <th>Warehouse</th>
//                     <th>Warehouse Stock</th>
//                     <th>ToTal In Stock</th>
//                     <th>Requested Qty</th>
//                     <th>Issued Qty</th>
//                     <th>Remaining Qty</th>
//                     <th>Entered Qty</th>
//                   </tr>
//                 </thead>
//                 <tbody>
//                   {goodIssue.map((line, index) => (
//                     <tr key={index}>
//                         <td className="text-center">
//     <input
//       type="checkbox"
//       checked={selectedRows.includes(index)}
//       onChange={() => handleCheckboxChange(index)}
//     />
//    </td> */}
//                                            {/* <td>
//     <input
//       type="text"
//       name="request_stock_docno"
//       className="form-control"
//       value={line.request_stock_docno}
//       readOnly
//     />  */}
    
// {/* </td> */}
// {/* <td>
//     <input
//       type="text"
//       name="doc_num"
//       className="form-control"
//       value={line.doc_num}
//       readOnly
//     />
    
// </td>
//                       <td>
//     <input
//       type="text"
//       name="item_code"
//       className="form-control"
//       value={line.item_code}
//       readOnly
//     />
    
// </td>

//                       <td  >
//                         <input
//                           type="text"
//                           name="item_name" 
//                           className="form-control"
//                           value={line.item_name}
//                           onChange={(e) => handleLineChange(index, e)}
//                           readOnly
//                         />
//                       </td>
//                       <td>
//                         <input
//                            value={line.warehouse}
//                            type="text"
//                            name="warehouse"
//                            className="form-control"
//                            readOnly
//                            onChange={(e) => handleLineChange(index, e)}
//                         />
//                       </td>
//                       <td>
//                         <input
//                           type="number"
//                           name="remainingqty"
//                           className="form-control"
//                           value={line.remainingqty}
//                           onChange={(e) => handleLineChange(index, e)}
//                           readOnly
//                         />
//                       </td>
//                       <td>
//                         <input
//                           type="number"
//                           name="issuedqty"
//                           className="form-control"
//                           value={line.issuedqty}
//                           onChange={(e) => handleLineChange(index, e)}
//                           readOnly
//                         />
//                       </td>
//                       <td>
//                         <input
//                           type="number"
//                           name="requiredqty"
//                           className="form-control"
//                           value={line.requiredqty}
//                           onChange={(e) => handleLineChange(index, e)}
//                           readOnly
//                         />
//                       </td>
//                       <td>
//                         <input
//                           type="number"
//                           name="ConfirmedQty"
//                           className="form-control"
//                           value={line.ConfirmedQty}
//                           onChange={(e) => handleLineChange(index, e)}
                        
//                         />
//                       </td>
                      
//                     </tr>
//                   ))}
//                 </tbody>
//               </Table> */} 

// <Table bordered size="sm">
// <thead style={{ fontSize: "12px" }}>
// <tr>
//   <th></th> {/* For expand icon */}
//   {/* <th>Select</th> */}
//   <th>Doc Num</th>
//   <th>Doc Date</th>
//   <th>Doc Status</th>
//   {/* <th>Item Name</th>
//   <th>Warehouse</th>
//   <th>Warehouse Stock</th>
//   <th>ToTal In Stock</th>
//   <th>Requested Qty</th>
//   <th>Issued Qty</th>
//   <th>Remaining Qty</th>
//   <th>Entered Qty</th> */}
// </tr>
// </thead>
// <tbody>
// {Object.keys(groupedData).map((docNum, groupIndex) => {
// const firstLine = groupedData[docNum][0]; // assuming all lines in the group share the same doc info
// return (
// <React.Fragment key={docNum}>
//   {/* Parent row (Doc Num header) */}
//   <tr style={{ backgroundColor: "#f8f9fa", fontWeight: "bold", color: "#333" }}>
//     <td
//       className="text-center"
//       onClick={() => toggleDoc(docNum)}
//       style={{ cursor: "pointer", fontSize: "18px" }}
//     >
//       {expandedDocs.includes(docNum) ? "−" : "+"}
//     </td>
//     <td>{docNum}</td>
//     <td>{firstLine?.doc_date || "—"}</td>
//     <td>
//       <span className="badge bg-success" style={{ fontSize: "13px" }}>
//         <i className="bi bi-check-circle-fill me-1"></i> Open
//       </span>
//     </td>
//     {/* <td colSpan="6"></td> */}
//   </tr>

//     {/* Child rows (Only visible if expanded) */}
//     {expandedDocs.includes(docNum) && (
// <>
// {/* Sub-header row for child items */}
// <tr className="table-secondary text-center" style={{ fontSize: "12px", fontWeight: "bold" }}>
//   <td></td>
//   <td>Select</td>
//   {/* <td>Doc Num</td> */}
//   <td>Item Code</td>
//   <td>Item Name</td>
//   <td>Warehouse</td>
//   <td>WareHouse Stock</td>
//  <td>Total In Stock</td>
//   <td>Requested Qty</td>
//   <td>Issued Qty</td>
//   <td>Remaining Qty</td>
//   <td>Entered Qty</td>
// </tr>

// {/* Child rows */}
// {groupedData[docNum].map((line, index) => {
//   const globalIndex = goodIssue.findIndex(g => g === line);
//   return (
//     <tr key={index}>
//       <td></td>
//       <td>
//         <input
//           type="checkbox"
//           checked={selectedRows.includes(globalIndex)}
//           onChange={() => handleCheckboxChange(globalIndex)}
//         />
//       </td>
//       {/* <td>{line.doc_num}</td> */}
//       <td>{line.item_code}</td>
//       <td>{line.item_name}</td>
//       <td>
//         {/* {line.warehouse} */}
//         <SelectField
//                            options={warehouseOptions}
//                            value={line.warehouse}
//                            name="warehouse"
//                           //  className="form-control"
//                            style={{marginTop:"-24px"}}
//                            onChange={(selected) => handleWarehouseChange(index, selected)}
//                         /> 
//         </td>
// <td>{Number(line.WarehouseStock).toFixed(2)}</td>
// <td>{Number(line.TotalInStock).toFixed(2)}</td>
//     <td>{Number(line.requiredqty).toFixed(2)}</td>
// <td>{Number(line.issuedqty).toFixed(2)}</td>
// <td>{Number(line.remainingqty).toFixed(2)}</td>
//       <td>
//         <input
//           type="number"
//           name="ConfirmedQty"
//           className="form-control form-control-sm"
//           value={line.ConfirmedQty}
//           onChange={(e) => handleLineChange(globalIndex, e)}
//         />
//       </td>
//     </tr>
//   );
// })}
// </>
// )}
//   </React.Fragment>
// )
// })}
// </tbody>
// </Table>
              
//           </Col>

//           <Col md={12}>
//             {/* </CardLayout> */}
//             {/* <CardLayout> */}
//               <button type="submit" className="cus-btn">
//                 Submit
//               </button>
//               <Link to="/sales-orders">
//                 <button
//                   type="button"
//                   className="cus-btn-bor"
//                   style={{
//                     backgroundColor: "#F07632",
//                     color: "white",
//                     borderColor: "#F07632",
//                   }}
//                 >
//                   Back
//                 </button>
//               </Link>
//           </Col>
//             </CardLayout>
//         </Row>
//       </form>
//     </PageLayout>
//   );
// }









{
  "navs": [
    {
      "menu": [
        {
          "icon": "donut_small",
          "text": "Statistics",
          "href":"/crm"
        },
        {
          "href": "/dashboard",
          "icon": "report",
          "text": "Dashboard"
        },
       
        {
          "href": "/inventory",
          "icon": "store",
          "text": "Inventory Transfer Request"
        }  
        ,
        {
          "href": "/good-issue",
          "icon": "class",
          "text": "Stock Issue Approval"
        }   
        ,
       
        {
          "icon": "group",
          "text": "User Management",
          "submenu": [
            { "href": "/view-user-roles", "text": "User Roles" },
            { "href": "/roles", "text": "Roles" }
          ]
        } 
        
      ]
    }
  ],
  "button": { "icon": "lock", "path": "/login", "text": "logout" }
}
